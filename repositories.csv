import requests
import time

# GitHub token and headers for authentication
GITHUB_TOKEN = # Replace with your actual token
HEADERS = {'Authorization': f'token {GITHUB_TOKEN}'}

# Function to fetch repositories for a user
def fetch_user_repos(username):
    url = f"https://api.github.com/users/{username}/repos"
    repos = []
    params = {'per_page': 100, 'page': 1, 'sort': 'pushed'}  # 100 repos per page, sorted by pushed date

    while len(repos) < 500:  # Limit to 500 repos per user
        response = requests.get(url, headers=HEADERS, params=params)
        if response.status_code == 200:
            page_repos = response.json()
            repos.extend(page_repos)
            if len(page_repos) < 100:
                break  # Exit if fewer than 100 repos returned, indicating last page
            params['page'] += 1  # Go to next page
        else:
            print(f"Error fetching repos for {username}: {response.status_code}")
            break
        time.sleep(1)  # Pause to respect rate limits
    return repos[:500]  
for login in users_df['login']:
    user_repos = fetch_user_repos(login)
    for repo in user_repos:
        repo_info = {
            'login': login,  # GitHub user ID
            'full_name': repo['full_name'],
            'created_at': repo['created_at'],
            'stargazers_count': repo['stargazers_count'],
            'watchers_count': repo['watchers_count'],
            'language': repo['language'],
            'has_projects': repo['has_projects'],
            'has_wiki': repo['has_wiki'],
            'license_name': repo['license']['key'] if repo['license'] else ''  # Safely handle None for license
        }
        repo_data.append(repo_info)
